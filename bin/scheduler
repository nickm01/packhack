#!/usr/bin/env node
// The above line is used by the heroku scheduler

'use strict'
const config = require('../config')
const mongoOp = require('../model/mongo')
const sendSms = require('../sendsms')
const logging = require('../logging')
const listItemFunctions = require('../listitems')
const Q = require('q')

mongoOp.intialize()

var count = 0
processScheduler()

function processScheduler () {
  mongoOp.ListItems.find({'listKey': config.remindersListKey})
  .exec()
  .then(listItems => {
    allListItemsPromise(listItems)
    .then(result => {
      console.log('*** Reminders Complete')
      process.exit()
    }, error => {
      logging.logError('scheduler', 0, 'Scheduler Error', error)
      console.log('*** REMINDERS ERROR *** error')
      process.exit()
    })
  }, error => {
    logging.logError('scheduler', '', '', error)
  })
}

function allListItemsPromise (listItems) {
  const listItemPromises = []
  listItems.forEach(function (listItem) {
    const reminderDate = new Date(listItem.reminderWhen)
    const now = new Date()
    console.log('Scheduler2:' + reminderDate + ' userId:' + listItem.reminderUserId + ' listItemName:' + listItem.listItemName)

    if (reminderDate < now) {
      listItemPromises.push(
        deleteListItemByNamePromise(listItem)
        .then(multipleOrSingleFamilyMembersForReminderUserIdPromise)
        .then(sendSmsForAllListItemFamilyMembersPromise)
      )
    }
  })
  return Q.all(listItemPromises)
}

function deleteListItemByNamePromise (listItem) {
  const promise = mongoOp.ListItems.remove(listItem)
    .exec()
    .then(removeResult => {
      if (removeResult.result.n !== 1) {
        throw new Error('Error in completing the reminder üò¶.')
      } else {
        console.log('---- Removed ' + listItem.listItemName + ' ' + removeResult.result.n)
        return listItem
      }
    })
  return promise
}

function multipleOrSingleFamilyMembersForReminderUserIdPromise (listItem) {
  let promise
  if (listItem.reminderUserId !== config.allFamilyMembersID) {
    promise = mongoOp.FamilyMembers.findOne({'familyId': listItem.familyId, 'userId': listItem.reminderUserId})
      .exec()
      .then(familyMember => {
        return [{listItem, familyMember}]
      })
  } else {
    promise = mongoOp.FamilyMembers.find({'familyId': listItem.familyId})
      .exec()
      .then(familyMembers => {
        return familyMembers.map(familyMember => {
          return ({listItem, familyMember})
        })
      })
  }
  return promise
}

function sendSmsForAllListItemFamilyMembersPromise (listItemFamilyMembers) {
  const sendPromises = listItemFamilyMembers.map(listItemFamilyMember => {
    return sendSmsForListItemFamilyMemberPromise(listItemFamilyMember)
    .then(smsPromise)
  })
  return Q.all(sendPromises)
}

function sendSmsForListItemFamilyMemberPromise (listItemFamilyMember) {
  const listItem = listItemFamilyMember.listItem
  const familyMember = listItemFamilyMember.familyMember
  const deferred = Q.defer()
  let reminderText = ''
  if (listItem.reminderListKey == null || listItem.reminderListKey === '') {
    reminderText = listItem.reminderTitle
    deferred.resolve({listItem, familyMember, reminderText})
  } else {
    let unconfirmedList = {'listKey': listItem.reminderListKey, 'familyId': listItem.familyId}
    listItemFunctions.listItemsTextForList(unconfirmedList, function (err, text) {
      if (err) {
        if (listItem.reminderTitle !== '') {
          reminderText = listItem.reminderTitle + '\n'
        }
        reminderText += "(Sorry, couldn't find #" + listItem.reminderListKey + '.)'
      } else {
        reminderText = reminderTextForReminderListItemAndListItemsText(listItem, text)
      }
      deferred.resolve({listItem, familyMember, reminderText})
    })
  }
  return deferred.promise
}

function reminderTextForReminderListItemAndListItemsText (reimderListItem, listItemsText) {
  if (listItemsText === '' && reimderListItem.reminderTitle === '') {
    return '#' + reimderListItem.reminderListKey + ' - currently empty.'
  } else if (listItemsText === '' && reimderListItem.reminderTitle !== '') {
    return reimderListItem.reminderTitle + '\n(#' + reimderListItem.reminderListKey + ' is currently empty.)'
  } else if (listItemsText !== '' && reimderListItem.reminderTitle === '') {
    return '#' + reimderListItem.reminderListKey + ':' + listItemsText
  } else if (listItemsText !== '' && reimderListItem.reminderTitle !== '') {
    return reimderListItem.reminderTitle + '\n#' + reimderListItem.reminderListKey + ':' + listItemsText
  } else {
    return ''
  }
}

function smsPromise (listItemFamilyMemberReminderText) {
  const familyMember = listItemFamilyMemberReminderText.familyMember
  const reminderText = '‚è∞ ' + listItemFamilyMemberReminderText.reminderText
  const deferred = Q.defer()
  count++
  console.log('Count: ' + count + ' pn:' + familyMember.phoneNumber + ' ' + familyMember.name + ':' + reminderText)
  logging.log(familyMember.phoneNumber, familyMember.familyId, reminderText, 'Reminder', '')
  sendSms.sendSms(familyMember.phoneNumber, reminderText, function () {
    deferred.resolve(listItemFamilyMemberReminderText)
  })
  return deferred.promise
}
